{
	"info": {
		"_postman_id": "14ceacc5-d804-4834-ae34-8dbf4f352f18",
		"name": "Platinum Maju Jaya",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21868515"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('ok');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('success');\r",
									"\r",
									"    console.log(jsonData.data.username)\r",
									"    pm.environment.set('usernameLogin', jsonData.data.user.username)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{$randomFullName}}",
									"type": "default"
								},
								{
									"key": "username",
									"value": "{{$randomUserName}}",
									"type": "default"
								},
								{
									"key": "image",
									"type": "file",
									"src": "/C:/Users/userb/OneDrive/Gambar/flower.jpg"
								},
								{
									"key": "telp",
									"value": "08487438",
									"type": "default"
								},
								{
									"key": "password",
									"value": "{{NewPassword}}",
									"type": "default"
								},
								{
									"key": "confrimPassword",
									"value": "{{NewConfirmPassword}}",
									"type": "default"
								},
								{
									"key": "email",
									"value": "{{$randomEmail}}",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/api/user/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"user",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register With No Image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('ok');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('success');\r",
									"\r",
									"    console.log(jsonData.data.username)\r",
									"    pm.environment.set('usernameLogin', jsonData.data.user.username)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{$randomFullName}}",
									"type": "default"
								},
								{
									"key": "username",
									"value": "{{$randomUserName}}",
									"type": "default"
								},
								{
									"key": "image",
									"type": "file",
									"src": []
								},
								{
									"key": "telp",
									"value": "08487438",
									"type": "default"
								},
								{
									"key": "password",
									"value": "{{NewPassword}}",
									"type": "default"
								},
								{
									"key": "confrimPassword",
									"value": "{{NewConfirmPassword}}",
									"type": "default"
								},
								{
									"key": "email",
									"value": "{{$randomEmail}}",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/api/user/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"user",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register with Invalid Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should message invalid request\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('failed');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.be.an('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "",
									"type": "default"
								},
								{
									"key": "username",
									"value": "{{$randomUserName}}",
									"type": "default"
								},
								{
									"key": "image",
									"type": "file",
									"src": "/C:/Users/userb/OneDrive/Gambar/flower.jpg"
								},
								{
									"key": "telp",
									"value": "08487438",
									"type": "default"
								},
								{
									"key": "password",
									"value": "{{NewPassword}}",
									"type": "default"
								},
								{
									"key": "confrimPassword",
									"value": "{{NewConfirmPassword}}",
									"type": "default"
								},
								{
									"key": "email",
									"value": "{{$randomEmail}}",
									"type": "default"
								}
							]
						},
						"url": {
							"raw": "http://localhost:3000/api/user/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"user",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains login\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('ok');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('success');\r",
									"    pm.expect(jsonData).to.ownProperty('data');\r",
									"    \r",
									"    // memasukkan noteId ke dalam environment variable\r",
									"    pm.environment.set('accessToken', jsonData.data.token)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{usernameLogin}}\",\r\n    \"password\": \"{{passwordLogin}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/user/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login With Invalid Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains login\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('failed');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.be.an('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{usernameLogin}}\",\r\n    \"password\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/user/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains login\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('ok');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('success');\r",
									"    pm.expect(jsonData).to.ownProperty('data');\r",
									"    \r",
									"    // memasukkan noteId ke dalam environment variable\r",
									"    pm.environment.set('accessTokenAdmin', jsonData.data.token)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/user/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"user",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Address",
			"item": [
				{
					"name": "Add Address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('ok');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('success');\r",
									"    pm.expect(jsonData).to.ownProperty('data');\r",
									"    pm.expect(jsonData.data).to.be.an('object');\r",
									"\r",
									"    pm.environment.set('addressId', jsonData.data.id)\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"province\": \"Java\",\r\n    \"city\": \"{{$randomCity}}\",\r\n    \"postal_code\": 5748,\r\n    \"detail\": \"{{$randomStreetAddress}}\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/customer/address/add",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"customer",
								"address",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Address with Incorrect Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains with incorrect response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('failed');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.be.an('string');\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"province\": \"Java\",\r\n    \"city\": \"{{$randomCity}}\",\r\n    \"postal_code\": null,\r\n    \"detail\": \"{{$randomStreetAddress}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/customer/address/add",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"customer",
								"address",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Address By User Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('ok');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('success');\r",
									"    pm.expect(jsonData).to.ownProperty('data');\r",
									"    pm.expect(jsonData.data).to.be.an('array');\r",
									"    pm.expect(jsonData.data).lengthOf.at.least(1);\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/customer/all/address/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"customer",
								"all",
								"address",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Detail Address By Valid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('ok');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('success');\r",
									"    pm.expect(jsonData).to.ownProperty('data');\r",
									"    pm.expect(jsonData.data).to.be.an('object');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/customer/address/{{addressId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"customer",
								"address",
								"{{addressId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Detail Address By Invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains message address not found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('failed');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('address not found');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/customer/address/3847839",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"customer",
								"address",
								"3847839"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Address with Valid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('ok');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('success');\r",
									"    pm.expect(jsonData).to.ownProperty('data');\r",
									"    pm.expect(jsonData.data).to.be.an('object');\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"province\": \"Java\",\r\n    \"city\": \"{{$randomCity}}\",\r\n    \"postal_code\": 5748,\r\n    \"detail\": \"{{$randomStreetAddress}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/customer/address/update/{{addressId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"customer",
								"address",
								"update",
								"{{addressId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Address with Invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains message address not found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('failed');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('address not found');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"province\": \"Java\",\r\n    \"city\": \"{{$randomCity}}\",\r\n    \"postal_code\": 5748,\r\n    \"detail\": \"{{$randomStreetAddress}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/customer/address/update/9238927",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"customer",
								"address",
								"update",
								"9238927"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Address with Incorrect Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains with incorrect response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('failed');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.be.an('string');\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"province\": \"Java\",\r\n    \"city\": 3637,\r\n    \"postal_code\": null,\r\n    \"detail\": \"{{$randomStreetAddress}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/customer/address/update/{{addressId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"customer",
								"address",
								"update",
								"{{addressId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Address with Valid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('ok');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('success');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/customer/address/delete/{{addressId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"customer",
								"address",
								"delete",
								"{{addressId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteAddress with Invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains message address not found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('failed');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('address not found');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/customer/address/delete/2738",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"customer",
								"address",
								"delete",
								"2738"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Category",
			"item": [
				{
					"name": "Add Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('ok');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('success');\r",
									"    pm.expect(jsonData).to.ownProperty('data');\r",
									"    pm.expect(jsonData.data).to.be.an('object');\r",
									"\r",
									"    pm.environment.set('categoryId', jsonData.data.id)\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomProduct}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/admin/category/add",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"admin",
								"category",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Category with Incorrect Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains with incorrect response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('failed');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.be.an('string');\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/admin/category/add",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"admin",
								"category",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Category with  Account Customer [Unauthorized]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains with message unauthorized\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('failed');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('unauthorized');\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomProduct}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/admin/category/add",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"admin",
								"category",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('ok');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('success');\r",
									"    pm.expect(jsonData).to.ownProperty('data');\r",
									"    pm.expect(jsonData.data).to.be.an('array');\r",
									"    pm.expect(jsonData.data).lengthOf.at.least(1);\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/public/category",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"public",
								"category"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Category By Valid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('ok');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('success');\r",
									"    pm.expect(jsonData).to.ownProperty('data');\r",
									"    pm.expect(jsonData.data).to.be.an('object');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/public/category/{{categoryId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"public",
								"category",
								"{{categoryId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Category By Invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains message category not found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('failed');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('category not found');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/public/category/3847839",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"public",
								"category",
								"3847839"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Category with Valid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('ok');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('success');\r",
									"    pm.expect(jsonData).to.ownProperty('data');\r",
									"    pm.expect(jsonData.data).to.be.an('object');\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomProductName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/admin/category/update/{{categoryId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"admin",
								"category",
								"update",
								"{{categoryId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Category with Invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains message category not found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('failed');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('category not found');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomProductName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/admin/category/update/9238927",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"admin",
								"category",
								"update",
								"9238927"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Category with Incorrect Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains with incorrect response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('failed');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.be.an('string');\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": 123\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/admin/category/update/{{categoryId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"admin",
								"category",
								"update",
								"{{categoryId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Category with  Account Customer [Unauthorized]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains message unauthorized\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('failed');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('unauthorized');\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomProductName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/admin/category/update/{{categoryId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"admin",
								"category",
								"update",
								"{{categoryId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Category with  Account Customer [Unauthorized]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains message unauthorized\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('failed');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('unauthorized');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/admin/category/delete/{{categoryId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"admin",
								"category",
								"delete",
								"{{categoryId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Category with Valid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('ok');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('success');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/admin/category/delete/{{categoryId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"admin",
								"category",
								"delete",
								"{{categoryId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Category with Invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains message category not found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('failed');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('category not found');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/admin/category/delete/2738",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"admin",
								"category",
								"delete",
								"2738"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Product",
			"item": [
				{
					"name": "Add Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('ok');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('success');\r",
									"    pm.expect(jsonData).to.ownProperty('data');\r",
									"    pm.expect(jsonData.data).to.be.an('object');\r",
									"\r",
									"    pm.environment.set('productId', jsonData.data.id)\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomProductName}}\",\r\n    \"description\": \"this is product\",\r\n    \"category_id\": 23,\r\n    \"price\": 100000,\r\n    \"stock\": 20\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/admin/product/add",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"admin",
								"product",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Product with Category Not Available",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains message category not found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('failed');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('failed to add, category not found');\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomProductName}}\",\r\n    \"description\": \"this is product\",\r\n    \"category_id\": 1000,\r\n    \"price\": 100000,\r\n    \"stock\": 20\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/admin/product/add",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"admin",
								"product",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Product with Incorrect Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains with incorrect response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('failed');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.be.an('string');\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomProductName}}\",\r\n    \"description\": \"ini product\",\r\n    \"category_id\": 1,\r\n    \"price\": 1000000,\r\n    \"stock\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/admin/product/add",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"admin",
								"product",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Product with  Account Customer [Unauthorized]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains with message unauthorized\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('failed');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('unauthorized');\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomProductName}}\",\r\n    \"description\": \"ini product\",\r\n    \"category_id\": 1,\r\n    \"price\": 1000000,\r\n    \"stock\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/admin/product/add",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"admin",
								"product",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('ok');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('success');\r",
									"    pm.expect(jsonData).to.ownProperty('data');\r",
									"    pm.expect(jsonData.data).to.be.an('array');\r",
									"    pm.expect(jsonData.data).lengthOf.at.least(1);\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/public/product",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"public",
								"product"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Products By Valid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('ok');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('success');\r",
									"    pm.expect(jsonData).to.ownProperty('data');\r",
									"    pm.expect(jsonData.data).to.be.an('object');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/public/product/{{productId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"public",
								"product",
								"{{productId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Products By Invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains message product not found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('failed');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('product not found');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/public/product/3847839",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"public",
								"product",
								"3847839"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Product with Valid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('ok');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('success');\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomProductName}}\",\r\n    \"description\": \"this is product update\",\r\n    \"category_id\": 1,\r\n    \"price\": 100000,\r\n    \"stock\": 20\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/admin/product/update/{{productId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"admin",
								"product",
								"update",
								"{{productId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Product with Invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains message product not found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('failed');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('product not found');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomProductName}}\",\r\n    \"description\": \"this is product update\",\r\n    \"category_id\": 1,\r\n    \"price\": 100000,\r\n    \"stock\": 20\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/admin/product/update/9238927",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"admin",
								"product",
								"update",
								"9238927"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Product with Incorrect Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains with incorrect response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('failed');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.be.an('string');\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": 123,\r\n    \"description\": \"this is product update\",\r\n    \"category_id\": 1,\r\n    \"price\": 100000,\r\n    \"stock\": 20\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/admin/product/update/{{productId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"admin",
								"product",
								"update",
								"{{productId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Product with  Account Customer [Unauthorized]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains message unauthorized\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('failed');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('unauthorized');\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomProductName}}\",\r\n    \"description\": \"this is product update\",\r\n    \"category_id\": 1,\r\n    \"price\": 100000,\r\n    \"stock\": 20\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/admin/product/update/{{productId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"admin",
								"product",
								"update",
								"{{productId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Product with  Account Customer [Unauthorized]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains message unauthorized\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('failed');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('unauthorized');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/admin/product/delete/{{productId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"admin",
								"product",
								"delete",
								"{{productId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Product with Valid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('ok');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('success');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/admin/product/delete/{{productId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"admin",
								"product",
								"delete",
								"{{productId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Product with Invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains message product not found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('failed');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('product not found');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/admin/product/delete/2738",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"admin",
								"product",
								"delete",
								"2738"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Order",
			"item": [
				{
					"name": "Create Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('ok');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('success');\r",
									"    pm.expect(jsonData.data).to.be.an('object');\r",
									"\r",
									"    pm.environment.set('orderId', jsonData.data.order_id)\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Membuat owner User\r",
									"const getProduct = {\r",
									"    url: 'http://localhost:3000/api/public/product',\r",
									"    method: 'GET',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"    },\r",
									"};\r",
									"\r",
									"pm.sendRequest(getProduct, (error, response) => {\r",
									"    console.log(error ? error : response);\r",
									"\r",
									"    let responseJson = response.json().data;\r",
									"\r",
									"    let productArray = []\r",
									"    responseJson.forEach((data)=>{\r",
									"        let product = {\r",
									"            id: data.id,\r",
									"            qty: 1\r",
									"        }\r",
									"\r",
									"        productArray.push(product);\r",
									"    });\r",
									"\r",
									"    console.log(productArray);\r",
									"    pm.environment.set('productOrder', JSON.stringify(productArray));\r",
									"    //console.log(response.json().data);\r",
									"    \r",
									"\r",
									"    // Setelah mendaftar, login dengan Owner User\r",
									"\r",
									"    // const loginOwnerUserRequest = {\r",
									"    //     url: 'localhost:5000/authentications',\r",
									"    //     method: 'POST',\r",
									"    //     header: {\r",
									"    //         'Content-Type': 'application/json',\r",
									"    //     },\r",
									"    //      body : {\r",
									"    //         mode: 'raw',\r",
									"    //         raw: JSON.stringify({\r",
									"    //             username: 'owner_user',\r",
									"    //             password: 'secret'\r",
									"    //         }),\r",
									"    //     },\r",
									"    // };\r",
									"\r",
									"    // pm.sendRequest(loginOwnerUserRequest, (error, response) =>{\r",
									"    //    if(!error) {\r",
									"    //        // memasukkan access token Owner User ke environment variabel\r",
									"    //        const { data: { accessToken } } = response.json()\r",
									"    //        pm.environment.set('ownerAccessToken', accessToken);\r",
									"    //    }\r",
									"    // })\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"products\":{{productOrder}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/customer/order/add",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"customer",
								"order",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Order Pending By User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('ok');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('success');\r",
									"    pm.expect(jsonData.data).to.be.an('object');\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/customer/order/pending/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"customer",
								"order",
								"pending",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get List Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('ok');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('success');\r",
									"    pm.expect(jsonData).to.ownProperty('data');\r",
									"    pm.expect(jsonData.data).to.be.an('array');\r",
									"    pm.expect(jsonData.data).lengthOf.at.least(1);\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/admin/order",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"admin",
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get List Order With Query Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('ok');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('success');\r",
									"    pm.expect(jsonData).to.ownProperty('data');\r",
									"    pm.expect(jsonData.data).to.be.an('array');\r",
									"    pm.expect(jsonData.data).lengthOf.at.least(1);\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/admin/order?status=pending",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"admin",
								"order"
							],
							"query": [
								{
									"key": "status",
									"value": "pending"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get List Order With Multipe Query Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('ok');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('success');\r",
									"    pm.expect(jsonData).to.ownProperty('data');\r",
									"    pm.expect(jsonData.data).to.be.an('array');\r",
									"    pm.expect(jsonData.data).lengthOf.at.least(2);\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/admin/order?status=pending,completed",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"admin",
								"order"
							],
							"query": [
								{
									"key": "status",
									"value": "pending,completed"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Submit Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('ok');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('success');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/customer/order/submit/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"customer",
								"order",
								"submit",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Status Order Process",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('ok');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('success');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\" :  \"ORDER_PROCESSED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/admin/order/update-status/{{orderId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"admin",
								"order",
								"update-status",
								"{{orderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Status Order Completed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('ok');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('success');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\" :  \"ORDER_COMPLETED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/admin/order/update-status/{{orderId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"admin",
								"order",
								"update-status",
								"{{orderId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}