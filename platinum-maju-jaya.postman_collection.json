{
	"info": {
		"_postman_id": "88e0c492-c092-4f00-ad12-3bf6012b9a74",
		"name": "Platinum Maju Jaya",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('ok');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('success');\r",
									"\r",
									"    console.log(jsonData.data.username)\r",
									"    pm.environment.set('usernameLogin', jsonData.data.username)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomFullName}}\",\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"telp\": \"{{$randomPhoneNumber}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{NewPassword}}\",\r\n    \"confrimPassword\": \"{{NewConfirmPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/user/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"user",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains login\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('ok');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('success');\r",
									"    pm.expect(jsonData).to.ownProperty('token');\r",
									"    \r",
									"    // memasukkan noteId ke dalam environment variable\r",
									"    pm.environment.set('accessToken', jsonData.token)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{usernameLogin}}\",\r\n    \"password\": \"{{passwordLogin}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/user/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains login\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('ok');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('success');\r",
									"    pm.expect(jsonData).to.ownProperty('token');\r",
									"    \r",
									"    // memasukkan noteId ke dalam environment variable\r",
									"    pm.environment.set('accessTokenAdmin', jsonData.token)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/user/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"user",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Address",
			"item": [
				{
					"name": "Add Address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('ok');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('success');\r",
									"    pm.expect(jsonData).to.ownProperty('data');\r",
									"    pm.expect(jsonData.data).to.be.an('object');\r",
									"\r",
									"    pm.environment.set('addressId', jsonData.data.id)\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"province\": \"Java\",\r\n    \"city\": \"{{$randomCity}}\",\r\n    \"postal_code\": 5748,\r\n    \"detail\": \"{{$randomStreetAddress}}\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/address/create",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"address",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Address with Incorrect Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains with incorrect response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('failed');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.be.an('string');\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"province\": \"Java\",\r\n    \"city\": \"{{$randomCity}}\",\r\n    \"postal_code\": null,\r\n    \"detail\": \"{{$randomStreetAddress}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/address/create",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"address",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Address By User Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('ok');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('success');\r",
									"    pm.expect(jsonData).to.ownProperty('data');\r",
									"    pm.expect(jsonData.data).to.be.an('array');\r",
									"    pm.expect(jsonData.data).lengthOf.at.least(1);\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/address/",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"address",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Detail Address By Valid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('ok');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('success');\r",
									"    pm.expect(jsonData).to.ownProperty('data');\r",
									"    pm.expect(jsonData.data).to.be.an('object');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/address/{{addressId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"address",
								"{{addressId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Detail Address By Invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains message address not found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('failed');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('address not found');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/address/3847839",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"address",
								"3847839"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Category with Valid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('ok');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('success');\r",
									"    pm.expect(jsonData).to.ownProperty('data');\r",
									"    pm.expect(jsonData.data).to.be.an('object');\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"province\": \"Java\",\r\n    \"city\": \"{{$randomCity}}\",\r\n    \"postal_code\": 5748,\r\n    \"detail\": \"{{$randomStreetAddress}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/address/update/{{addressId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"address",
								"update",
								"{{addressId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Category with Invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains message address not found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('failed');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('address not found');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"province\": \"Java\",\r\n    \"city\": \"{{$randomCity}}\",\r\n    \"postal_code\": 5748,\r\n    \"detail\": \"{{$randomStreetAddress}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/address/update/9238927",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"address",
								"update",
								"9238927"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Category with Incorrect Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains with incorrect response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('failed');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.be.an('string');\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"province\": \"Java\",\r\n    \"city\": 3637,\r\n    \"postal_code\": null,\r\n    \"detail\": \"{{$randomStreetAddress}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/address/update/{{addressId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"address",
								"update",
								"{{addressId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Category with Valid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('ok');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('success');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:3000/address/delete/{{addressId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"address",
								"delete",
								"{{addressId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Category with Invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains message address not found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('failed');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('address not found');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:3000/address/delete/2738",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"address",
								"delete",
								"2738"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Category",
			"item": [
				{
					"name": "Add Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('ok');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('success');\r",
									"    pm.expect(jsonData).to.ownProperty('data');\r",
									"    pm.expect(jsonData.data).to.be.an('object');\r",
									"\r",
									"    pm.environment.set('categoryId', jsonData.data.id)\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomProduct}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/admin/category/add",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"admin",
								"category",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Category with Incorrect Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains with incorrect response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('failed');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.be.an('string');\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/admin/category/add",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"admin",
								"category",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Category with  Account Customer [Unauthorized]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains with message unauthorized\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('failed');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('unauthorized');\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomProduct}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/admin/category/add",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"admin",
								"category",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('ok');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('success');\r",
									"    pm.expect(jsonData).to.ownProperty('data');\r",
									"    pm.expect(jsonData.data).to.be.an('array');\r",
									"    pm.expect(jsonData.data).lengthOf.at.least(1);\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/category",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"category"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Category By Valid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('ok');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('success');\r",
									"    pm.expect(jsonData).to.ownProperty('data');\r",
									"    pm.expect(jsonData.data).to.be.an('object');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/category/{{categoryId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"category",
								"{{categoryId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Category By Invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains message category not found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('failed');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('category not found');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/category/3847839",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"category",
								"3847839"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Category with Valid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('ok');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('success');\r",
									"    pm.expect(jsonData).to.ownProperty('data');\r",
									"    pm.expect(jsonData.data).to.be.an('object');\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomProductName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/admin/category/update/{{categoryId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"admin",
								"category",
								"update",
								"{{categoryId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Category with Invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains message category not found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('failed');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('category not found');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomProductName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/admin/category/update/9238927",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"admin",
								"category",
								"update",
								"9238927"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Category with Incorrect Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains with incorrect response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('failed');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.be.an('string');\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": 123\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/admin/category/update/{{categoryId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"admin",
								"category",
								"update",
								"{{categoryId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Category with  Account Customer [Unauthorized]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains message unauthorized\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('failed');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('unauthorized');\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomProductName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/admin/category/update/{{categoryId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"admin",
								"category",
								"update",
								"{{categoryId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Category with  Account Customer [Unauthorized]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains message unauthorized\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('failed');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('unauthorized');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:3000/admin/category/delete/{{categoryId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"admin",
								"category",
								"delete",
								"{{categoryId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Category with Valid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('ok');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('success');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:3000/admin/category/delete/{{categoryId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"admin",
								"category",
								"delete",
								"{{categoryId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Category with Invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains message category not found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('failed');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('category not found');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:3000/admin/category/delete/2738",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"admin",
								"category",
								"delete",
								"2738"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Product",
			"item": [
				{
					"name": "Add Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('ok');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('success');\r",
									"    pm.expect(jsonData).to.ownProperty('data');\r",
									"    pm.expect(jsonData.data).to.be.an('object');\r",
									"\r",
									"    pm.environment.set('productId', jsonData.data.id)\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomProductName}}\",\r\n    \"description\": \"this is product\",\r\n    \"category_id\": 1,\r\n    \"price\": 100000,\r\n    \"stock\": 20\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/admin/product/add",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"admin",
								"product",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Product with Category Not Available",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains message category not found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('failed');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('failed to add, category not found');\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomProductName}}\",\r\n    \"description\": \"this is product\",\r\n    \"category_id\": 1000,\r\n    \"price\": 100000,\r\n    \"stock\": 20\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/admin/product/add",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"admin",
								"product",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Product with Incorrect Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains with incorrect response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('failed');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.be.an('string');\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomProductName}}\",\r\n    \"description\": \"ini product\",\r\n    \"category_id\": 1,\r\n    \"price\": 1000000,\r\n    \"stock\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/admin/product/add",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"admin",
								"product",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Product with  Account Customer [Unauthorized]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains with message unauthorized\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('failed');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('unauthorized');\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomProductName}}\",\r\n    \"description\": \"ini product\",\r\n    \"category_id\": 1,\r\n    \"price\": 1000000,\r\n    \"stock\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/admin/product/add",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"admin",
								"product",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('ok');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('success');\r",
									"    pm.expect(jsonData).to.ownProperty('data');\r",
									"    pm.expect(jsonData.data).to.be.an('array');\r",
									"    pm.expect(jsonData.data).lengthOf.at.least(1);\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/product",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"product"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Products By Valid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('ok');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('success');\r",
									"    pm.expect(jsonData).to.ownProperty('data');\r",
									"    pm.expect(jsonData.data).to.be.an('object');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/product/{{productId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"product",
								"{{productId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Products By Invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains message product not found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('failed');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('product not found');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:3000/product/3847839",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"product",
								"3847839"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Product with Valid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('ok');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('success');\r",
									"    pm.expect(jsonData).to.ownProperty('data');\r",
									"    pm.expect(jsonData.data).to.be.an('object');\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomProductName}}\",\r\n    \"description\": \"this is product update\",\r\n    \"category_id\": 1,\r\n    \"price\": 100000,\r\n    \"stock\": 20\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/admin/product/update/{{productId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"admin",
								"product",
								"update",
								"{{productId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Product with Invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains message product not found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('failed');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('product not found');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomProductName}}\",\r\n    \"description\": \"this is product update\",\r\n    \"category_id\": 1,\r\n    \"price\": 100000,\r\n    \"stock\": 20\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/admin/product/update/9238927",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"admin",
								"product",
								"update",
								"9238927"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Product with Category Not Available Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains message category not found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('failed');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('failed to add, category not found');\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomProductName}}\",\r\n    \"description\": \"this is product updated\",\r\n    \"category_id\": 1000,\r\n    \"price\": 100000,\r\n    \"stock\": 20\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/admin/product/update/{{productId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"admin",
								"product",
								"update",
								"{{productId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Product with Incorrect Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains with incorrect response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('failed');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.be.an('string');\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": 123,\r\n    \"description\": \"this is product update\",\r\n    \"category_id\": 1,\r\n    \"price\": 100000,\r\n    \"stock\": 20\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/admin/product/update/{{productId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"admin",
								"product",
								"update",
								"{{productId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Product with  Account Customer [Unauthorized]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains message unauthorized\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('failed');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('unauthorized');\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomProductName}}\",\r\n    \"description\": \"this is product update\",\r\n    \"category_id\": 1,\r\n    \"price\": 100000,\r\n    \"stock\": 20\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:3000/admin/product/update/{{productId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"admin",
								"product",
								"update",
								"{{productId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Product with  Account Customer [Unauthorized]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains message unauthorized\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('failed');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('unauthorized');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:3000/admin/product/delete/{{productId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"admin",
								"product",
								"delete",
								"{{productId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Product with Valid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('ok');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('success');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:3000/admin/product/delete/{{productId}}",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"admin",
								"product",
								"delete",
								"{{productId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Product with Invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains message product not found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('failed');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('product not found');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:3000/admin/product/delete/2738",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"admin",
								"product",
								"delete",
								"2738"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Order",
			"item": [
				{
					"name": "Create Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('ok');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('success');\r",
									"    pm.expect(jsonData.data).to.be.an('object');\r",
									"\r",
									"    pm.environment.set('orderId', jsonData.data.order_id)\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"products\":[\r\n        {\r\n            \"id\": 2,\r\n            \"qty\":1\r\n        },\r\n         {\r\n            \"id\": 8,\r\n            \"qty\":1\r\n        },\r\n        {\r\n            \"id\": 4,\r\n            \"qty\":1\r\n        },\r\n        {\r\n            \"id\": 7,\r\n            \"qty\":1\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/order/create",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"order",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Order Pending By User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('ok');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('success');\r",
									"    pm.expect(jsonData.data).to.be.an('object');\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/order/pending/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"order",
								"pending",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Submit Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('ok');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('success');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/order/submit/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"order",
								"submit",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Status Order Process",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('ok');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('success');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\" :  \"ORDER_PROCESSED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/admin/order/update-status/{{orderId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"admin",
								"order",
								"update-status",
								"{{orderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Status Order Completed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response body data should contains\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData).to.ownProperty('status');\r",
									"    pm.expect(jsonData.status).to.equals('ok');\r",
									"    pm.expect(jsonData).to.ownProperty('message');\r",
									"    pm.expect(jsonData.message).to.equals('success');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\" :  \"ORDER_COMPLETED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/admin/order/update-status/{{orderId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"admin",
								"order",
								"update-status",
								"{{orderId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}